name: 'Wheel Builder'
description: 'Build Binary wheels for a Python project'

on:
  workflow_call:
    inputs:
      dockerfile:
        description: 'Dockerfile to use'
        type: string
        required: false
        default: './docker/Dockerfile.python_wheels'
      context:
        description: 'Context to pass into container'
        type: string
        required: false
        default: '.'
      py_versions:
        description: 'Versions of Python to build against'
        type: string
        required: false
        default: '["3.9", "3.10", "3.11", "3.12", "3.13"]'
      mnl_versions:
        description: 'Versions of ManyLinux to build against'
        type: string
        required: false
        default: '["2_28", "2_34", "2_39"]'
      cache_mode:
        description: 'Container cache mode min/max'
        type: string
        required: false
        default: 'max'

jobs:
  bin:
    name: ManyLinux
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      PY_VER: ${{ matrix.python-version }}
      BASE_IMAGE: quay.io/pypa/manylinux_${{ matrix.mnl-version }}:latest
      GHCR_REPO: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
      BUILD_SUFX: py${{ matrix.python-version }}-mnl${{ matrix.mnl-version }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(inputs.py_versions) }}
        mnl-version: ${{ fromJson(inputs.mnl_versions) }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PY_VER }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PY_VER }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      if: github.event_name != 'pull_request'
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set dynamic environment
      id: set-env
      run: |
        PLATFORMS="`docker manifest inspect ${{ env.BASE_IMAGE }} | \
          jq -r '.manifests[] | "\(.platform.os)/\(.platform.architecture)\(if .platform.variant != null then "/\(.platform.variant)" else "" end)"' | \
          sort -u | grep -v unknown | paste -sd ','`"
        GIT_BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
        GIT_BRANCH="${GIT_BRANCH#refs/tags/}"
        BUILD_IMAGE="${GHCR_REPO}:${GIT_BRANCH}-${BUILD_SUFX}"
        if [ "${{ github.event_name }}" != 'pull_request' ]
        then
          CACHE_IMAGE="${BUILD_IMAGE}"
          CACHE_SPEC="type=registry,ref=${BUILD_IMAGE}-buildcache"
          if ! docker manifest inspect ${CACHE_IMAGE} >/dev/null 2>/dev/null
          then
             CACHE_IMAGE="scratch"
          fi
          DO_PUSH="true"
        else
          CACHE_IMAGE="scratch"
          CACHE_SPEC="gha"
          DO_PUSH="false"
        fi
        CCACHE_MNL_TAG="`echo '${{ matrix.mnl-version }}' | sed 's|[.]|_|g'`"
        CCACHE_IMG_TAG="manylinux-${CCACHE_MNL_TAG}"
        PY_SVER="3${PY_VER#3.}"
        PYTHON_CMD="/opt/python/cp${PY_SVER}-cp${PY_SVER}/bin/python"
        echo "Platforms: ${PLATFORMS}"
        echo "Build Image: ${BUILD_IMAGE}"
        echo "Cache Image: ${CACHE_IMAGE}"
        echo "PLATFORMS=${PLATFORMS}" >> $GITHUB_ENV
        echo "CACHE_SPEC=${CACHE_SPEC}" >> $GITHUB_ENV
        echo "PYTHON_CMD=${PYTHON_CMD}" >> $GITHUB_ENV
        echo "BUILD_IMAGE=${BUILD_IMAGE}" >> $GITHUB_ENV
        echo "CACHE_IMAGE=${CACHE_IMAGE}" >> $GITHUB_ENV
        echo "DO_PUSH=${DO_PUSH}" >> $GITHUB_ENV
        echo "CCACHE_IMG_TAG=${CCACHE_IMG_TAG}" >> $GITHUB_ENV

    - name: Build Binary Wheels
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        build-args: |
          BASE_IMAGE=${{ env.BASE_IMAGE }}
          PY_VER=${{ env.PY_VER }}
          PYTHON_CMD=${{ env.PYTHON_CMD }}
          CACHE_IMAGE=${{ env.CACHE_IMAGE }}
          CCACHE_IMAGE=ghcr.io/sobomax/ccache:latest-${{ env.CCACHE_IMG_TAG }}
        platforms: ${{ env.PLATFORMS }}
        tags: ${{ env.BUILD_IMAGE }}
        push: ${{ env.DO_PUSH }}
        outputs: type=local,dest=dist_out
        cache-from: ${{ env.CACHE_SPEC }}
        cache-to: ${{ env.CACHE_SPEC }},mode=${{ inputs.cache_mode }},compression=zstd

    - name: Collect Wheels
      run: |
        mkdir dist
        mv `find dist_out -type f -name \*.whl | grep -v '/root/[.]cache/pip'` dist
        rm -r dist_out

    - name: Upload Wheels
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ env.BUILD_SUFX }}
        path: dist
